2013-10-12 
	关于角色数据的计算、优化
	像d2，角色各种属性之间形成了网状关系，那么当某一个/多个节点发生变化的时候，该如何更新与之相关的数据网呢？
	一开始我认为这种关系和树形结构类似，所以我打算从位于根节点的属性开始计算，沿着树形结构逐节点向着末端推进计算。
	比如假设每升一级加一点vit以及2life，而每点vit又加3life，而且升级还会增加AR，按照我一开始的思路，我会这么写
	function setLv(lv)
	{
		//赋值
		_lv = lv;
		
		//更新（直接子节点）数据
		updateVit();
		updateLife();
		updateAR();
		....
	}
	
	function updateVit()
	{
		_vit = _basicVit + _lv * 1;
		
		updateLife();
	}
	
	function updateLife()
	{
		_life = _basicLife + _lv * 2 + _vit * 3;
	}
	
	function updateAR()
	{
		......
	}
	
	这个实现，各种计算步骤要与网状关系同步维护，  随着网状关系变得复杂，计算步骤也会变得庞大，难以维护，而且从对updateLife的调用可以看出，存在很多重复操作。总的来说是不好的。
	然后我发现，这个关系网的连锁计算很像mvc模式中数据源的变化导致视图更新显示这一行为，于是我想到了用invalidate机制来优化网状结构的更新计算：
	基本思路：整个关系网可以分为许多条计算链路，一个节点至少会影响一条链路； 但是当任何一个节点发生变化后，并不马上重算其相关链路，而是做下“某链路需要更新计算”这一标记，等到下一更新时间点（比如invalidate之后的RENDER事件时）再做计算。 这样两次更新时间点之间，不论有多少节点发生多少次变化，其相关链路都只计算一次。
	最粗糙的实现就是整个关系网当做一条链路看待，不做细分。就像用一个ChangeEvent去驱动视图重绘所有元素一样（该元素实际上有没有发生变化）。根据场合，这种牺牲部分时间换取结构简单的做法是可以接受的。
	
	关于设计结构：计算公式与数据对象	根据我使用3dmax时对其设计模式的理解和习惯，数据对象只存放数据，对数据的修改则通过(3dmax)修改器，时间轴曲线等其他类、对象来操作
	
2013-10-14
	invalidate这个函数释义不明确，也许可以叫callTick(), regTick(), autoNextTick等等

	以力量为例，一个角色的力量计算公式为
	str = 初始str + 配点str + str加成 + str百分比加成
	
	为了图省事，没写成员属性的getter
	
2013-10-16
	更新链路的算法，每个节点的setter函数会修改节点值，注册失效，然后激活其直属节点的重算，其直属节点继续激活下一个直属节点，如此连锁激活直到数据网的末梢。
	失效机制将会导致TickMgr在下一计算帧开始时执行注册者的
	在这个设计中，节点分成两种，一种是可直接修改节点，一种是非直接修改节点。
	前者通常是最底端的原子节点，需要配备setter函数，后者只通过toRecal函数来schedule重算
	
2013-10-17
	尝试了一下上面算法，用手动的办法激活直属节点(参见  手动链接激活直属节点计算链 目录 )。我又想到了可以把节点封装一下，让它们可以在设置好关系之后自动发生连锁激活。

2013-10-19
	推演了一下封装节点的做法，感觉不适用：实现麻烦，使用起来不直观，调试的时候可能也麻烦。于是还是先用上面的手动激活方法继续写吧。

2013-10-20
	buff和技能的配置数据放在哪里？ 这些东西有个特点：经常会调整。
	最直接的做法，我们可以写死在代码里，优点是结构简单，能实现的功能最全；缺点是不便更新，每次修改都必须重新编译。
	从解决这个缺点出发，我们把一些配置数据从程序代码中移动到外部配置文件。有两种做法，一种用配置数据，另一种就是用脚本。
	配置数据适用于规则闭合的场合，比如各种模板数据
	脚本适用于规则开放的场合，比如技能，其实很多东西都可以用脚本来实现。

2013-10-22
	代码在什么情况下放在什么位置？自身？跨域？按照我的地区-中央政区模型，这应该是由代码涉及的政区所决定的。地方政府就可以解决的自然放在地方解决，需要跨地区解决的那就放在跨域管理器中呗。

2013-10-24 
	关于道具系统的设计
	道具的分类有很多种，功能和用法也不尽相同，有提供数值加成的，有用作消耗品、材料的，有可以主动点击使用触发技能或者什么东西的。虽然看上去都是道具图标，但是背后的机制不一样
	
	列出几个例子
	1 装备  武器提供攻击力，防具提供防御力，坐骑提供移动加成，并且还要修改角色的外观
	2 血瓶	使用血瓶其实是触发【喝血】这个技能，然后根据使用血瓶的数据，计算消耗多少血瓶，回复多少血
	3 材料	本省不能主动使用，在使用某些技能时需要扣除足够数量的材料
	4 炸弹	其实是触发【投掷炸弹】这个技能
	背包，钥匙，等等，好多好多

	当用户试图使用某道具时，系统需要根据道具的类型来执行对应的操作。

	关于装备，初步对其常见数据划分如下
	1 需求数据	比如属性、等级、职业需求
	2 功效数据	某类道具的专门效果，比如武器所增加的攻击力数值，防具所增加的防御力数值
	3 额外效果	比如装备某道具（在功效数据之外）额外提供的数值加成，在d2中是用【词缀】系统来实现的

	


	




